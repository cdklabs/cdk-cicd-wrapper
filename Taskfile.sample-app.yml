version: '3'

vars:
  # need to use 2 folders to ensure each relative path is correct after moving from samples to development
  DEVELOPMENT_DIR: "development/project"
  SAMPLES_APP_DIR: "samples"
  # Default sample app to use
  SAMPLE_APP: "cdk-ts-example"
  STAGES_ENABLED: "DEV"

tasks:

  dev:info:
    desc: Prints information about the pipeline
    summary: Prints information about the pipeline
    dir: '{{.DEVELOPMENT_DIR}}'
    silent: true
    cmds:
      - echo "Information:"
      - 'echo "AWS Region: ${AWS_REGION}"'
      - 'echo "AWS RES Account: ${ACCOUNT_RES}"'
      - 'echo "AWS Profile: $RES_ACCOUNT_AWS_PROFILE"'
      - 'echo "CDK Qualifier: ${CDK_QUALIFIER}"'
      - 'echo "Git Repository: ${GIT_REPOSITORY}"'
      - echo "Accounts:"
      - for: { var: STAGES_ENABLED, split: "," }
        cmd: 'echo "  - {{.ITEM}}: ${ACCOUNT_{{.ITEM}}} -- profile: ${{.ITEM}}_ACCOUNT_AWS_PROFILE"'
      - echo "===================================================="
      - npm run cdkls

  list:
    desc: List all available sample apps
    dir: '{{.SAMPLES_APP_DIR}}'
    silent: true
    cmds:
      - echo "Available sample apps:"
      - echo "-----------------------"
      - ls

  dev:clean:
    desc: Clean the build directory
    silent: true
    cmds:
      - rm -rf {{.DEVELOPMENT_DIR}}

  dev:create-development-dir:
    desc: Create the development directory
    internal: true
    silent: true
    cmds:
      - mkdir -p {{.DEVELOPMENT_DIR}}
    status:
      - test -d {{.DEVELOPMENT_DIR}}
  
  dev:init:
    desc: Initialize the development with {{.SAMPLE_APP}}
    requires:
      vars:
        - SAMPLE_APP
    cmds:
      - task: dev:clean
      - task: dev:create-development-dir
      - cp -a {{.SAMPLES_APP_DIR}}/{{.SAMPLE_APP}}/. {{.DEVELOPMENT_DIR}}
      - task: dev:npm:install

  dev:npm:install:
    desc: Install the dependencies for {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    cmds:
      - npx projen install
      - npm run default
      - npm run projen

  dev:update:
    desc: Update the wrapper for {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    cmds:
      - npm run update-cdk-cicd-wrapper

  dev:deploy:
    desc: Deploy the development with {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    cmds:
      - npm run build
      - npm run deploy -- --all --require-approval never
  
  dev:destroy:
    desc: Destroy the development with {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    interactive: true
    cmds:
      - npm exec -- cdk --version
      - for: { var: STAGES_ENABLED, split: "," } 
        task: dev:destroy:stage
        vars:
          STAGE: '{{.ITEM}}'
      - npm exec -- cdk destroy --all --profile {{.RES_ACCOUNT_AWS_PROFILE}}

  dev:destroy:stage:
    desc: Destroy the development with {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    interactive: true
    cmds:
      - npm exec -- cdk ls
      - npm exec -- cdk destroy --profile ${{.STAGE}}_ACCOUNT_AWS_PROFILE {{.STAGE}}/*

  dev:bootstrap:
    desc: Bootstrap the development for {{.SAMPLE_APP}}
    summary: |
      This task will bootstrap the AWS accounts to be able to deploy CDK applications.

      Get more information about CDK bootstrapping: https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html
    dir: '{{.DEVELOPMENT_DIR}}'
    silent: true
    cmds:
      - echo "==============================================================="
      - echo "# Bootstrapping CDK for the pipeline {{.GIT_REPOSITORY}}        "
      - echo "==============================================================="
      - task: dev:info
      - task: dev:bootstrap:internal
      - echo "================================================================"

  dev:workbench:deploy:
    desc: Deploy the development with {{.SAMPLE_APP}} in a workbench
    dir: '{{.DEVELOPMENT_DIR}}'
    cmds:
      - npm run build
      - npm run workbench -- --all --require-approval never --profile {{.DEV_ACCOUNT_AWS_PROFILE}}

  dev:bootstrap:internal:
    internal: true
    desc: Internal task to bootstrap the AWS accounts to be able to deploy CDK applications
    dir: '{{.DEVELOPMENT_DIR}}'
    preconditions:
      - sh: '[ `jq -r ''.context."@aws-cdk/core:bootstrapQualifier"'' cdk.json` = "$CDK_QUALIFIER" ]'
        msg: 'The bootstrap qualifier does not match the CDK_QUALIFIER variable. Please update the cdk.json file.'
    cmds:
      - task: dev:bootstrap:RES
      - for: { var: STAGES_ENABLED, split: "," } 
        task: dev:bootstrap:account
        vars:
          STAGE: '{{.ITEM}}'
          OPTS: --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess --trust ${ACCOUNT_RES}


  dev:bootstrap:RES:
    internal: true
    cmds:
      - task: dev:bootstrap:account
        vars:
          STAGE: RES

  dev:bootstrap:account:
    internal: true
    dir: '{{.DEVELOPMENT_DIR}}'
    requires:
      vars:
        - CDK_QUALIFIER
        - AWS_REGION
        - STAGE
    preconditions:
      - sh: '[[ ! -z "${{.STAGE}}_ACCOUNT_AWS_PROFILE" ]]'
        msg: 'The environment {{.STAGE}} does not have an AWS profile defined. Please define it in the .env file.'
    cmds:
      - cdk bootstrap --profile ${{.STAGE}}_ACCOUNT_AWS_PROFILE --qualifier $CDK_QUALIFIER {{.OPTS}} aws://$ACCOUNT_{{.STAGE}}/${AWS_REGION}
  
  dev:build:
    desc: Build the development with {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    cmds:
      - npm run build
  
  dev:prepare:
    desc: Prepare the development with {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    cmds:
      - npx projen install:ci
      - npm run validate -- --fix
      - npm run lint -- --fix
      - npm run license -- --fix


  dev:git:push:
    desc: Push the development with {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    deps:
      - dev:git:init
      - dev:prepare
    status:
      - '[ ! `git status` ]'
    cmds:
      - git add .
      - 'git commit -m "chore: Init" --no-verify'
      - git push -u sample-origin main --no-verify

  dev:git:init:
    desc: Initialize the development with {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    status:
      - 'git remote get-url sample-origin'
    requires:
      vars:
        - GIT_REPOSITORY
        - AWS_REGION
        - RES_ACCOUNT_AWS_PROFILE
    cmds:
      - git init .
      - git remote add sample-origin codecommit::{{.AWS_REGION}}://{{.RES_ACCOUNT_AWS_PROFILE}}@{{.GIT_REPOSITORY}}


  dev:loop:
    desc: Loop the development with {{.SAMPLE_APP}}
    dir: '{{.DEVELOPMENT_DIR}}'
    cmds:
      - task codeartifact:publish
      - task: dev:update
      - task: dev:deploy
      - task: dev:git:push

  upgrade:
    desc: Upgrade sample project
    dir: '{{.DEVELOPMENT_DIR}}/{{.SAMPLE_APP}}'
    cmds:
      - npm run upgrade