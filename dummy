"{\n  \"version\": \"0.2\",\n  \"env\": {\n    \"shell\": \"bash\",\n    \"variables\": {\n      \"AWS_STS_REGIONAL_ENDPOINTS\": \"regional\",\n      \"NO_PROXY\": \"eu-west-1.amazonaws.com\"\n    },\n    \"secrets-manager\": {\n      \"PROXY_USERNAME\": \"arn:aws:secretsmanager:eu-west-1:123456789012:secret:/proxy/credentials/default-aaaaaa:username\",\n      \"PROXY_PASSWORD\": \"arn:aws:secretsmanager:eu-west-1:123456789012:secret:/proxy/credentials/default-aaaaaa:password\",\n      \"HTTP_PROXY_PORT\": \"arn:aws:secretsmanager:eu-west-1:123456789012:secret:/proxy/credentials/default-aaaaaa:http_proxy_port\",\n      \"HTTPS_PROXY_PORT\": \"arn:aws:secretsmanager:eu-west-1:123456789012:secret:/proxy/credentials/default-aaaaaa:https_proxy_port\",\n      \"PROXY_DOMAIN\": \"arn:aws:secretsmanager:eu-west-1:123456789012:secret:/proxy/credentials/default-aaaaaa:proxy_domain\"\n    }\n  },\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"export HTTP_PROXY=\\\"http://$PROXY_USERNAME:$PROXY_PASSWORD@$PROXY_DOMAIN:$HTTP_PROXY_PORT\\\"\",\n        \"export HTTPS_PROXY=\\\"https://$PROXY_USERNAME:$PROXY_PASSWORD@$PROXY_DOMAIN:$HTTPS_PROXY_PORT\\\"\",\n        \"echo \\\"--- Proxy Test ---\\\"\",\n        \"curl -Is --connect-timeout 5 proxy-test.com | grep \\\"HTTP/\\\"\",\n        \"bash_command=$(cat << CDKEOF\\n #!/bin/bash\\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0\\nset -e\\n\\n# Create the configuration. This way Docker containers will use the proxy\\n\\nif [ -f /var/run/docker.pid ]; then \\n    echo \\\"--- Configuring docker env ---\\\"\\n    test -d ~/.docker/ || mkdir ~/.docker/\\n    cat > ~/.docker/config.json <<EOF\\n{\\n    \\\"proxies\\\": {\\n        \\\"default\\\": {\\n            \\\"httpProxy\\\": \\\"\\\\$HTTP_PROXY\\\",\\n            \\\"httpsProxy\\\": \\\"\\\\$HTTPS_PROXY\\\",\\n            \\\"noProxy\\\": \\\"\\\\$NO_PROXY\\\"\\n        }\\n    }\\n}\\nEOF\\n    cat ~/.docker/config.json\\n    # Kill and restart the docker daemon so that it reads the PROXY env variables\\n    kill \\\"\\\\$(cat /var/run/docker.pid)\\\"\\n    while kill -0 \\\"\\\\$(cat /var/run/docker.pid)\\\" ; do sleep 1 ; done\\n    /usr/local/bin/dockerd-entrypoint.sh > /dev/null 2>&1\\n    echo \\\"--- Docker daemon restarted ---\\\"\\nfi\\n\\n\\n\\nCDKEOF\\n ); echo -n \\\"$bash_command\\\" > ./.cdk.wrapper.proxy.sh.sh; chmod +x ./.cdk.wrapper.proxy.sh.sh; ./.cdk.wrapper.proxy.sh.sh; exit_code=$?; rm -rf ./.cdk.wrapper.proxy.sh.sh; [ $exit_code -eq 0 ];\",\n        \"bash_command=$(cat << CDKEOF\\n #!/bin/bash\\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0\\nset -e\\n\\necho \\\"The ACCOUNT_RES/ACCOUNT_DEV/ACCOUNT_INT is not set.\\\"\\necho \\\"Collecting values from the SSM Params\\\"\\n\\necho \\\"Getting all SSM params for the qualifier\\\"\\nparameters=\\\\$(aws ssm get-parameters-by-path --path /\\\\${CDK_QUALIFIER}/ --query \\\"Parameters[].[Name, Value]\\\" --output text)\\n\\n# Process the list of SSM parameters with values which are in teh following format:\\n# /qualifier/AccountDev        123456789012\\n# /qualifier/AccountInt        123456789012\\n# /qualifier/AccountRes        123456789012\\n\\n# Iterate over the list of parameters and print the values\\nparameter_name=;\\nparameter_value=;\\nwhile IFS= read -r line; do\\n    parameter_name=\\\\$(echo \\\\$line | awk '{print \\\\$1}');\\n    parameter_value=\\\\$(echo \\\\$line | awk '{print \\\\$2}');\\n    echo \\\"\\\\$parameter_name: \\\\$parameter_value\\\";\\n\\n    if [[ \\\\$parameter_name =~ \\\"Account\\\" ]]; then\\n        # get the stageName from the end of the parameter name after the Account string\\n        stageName=\\\\${parameter_name##*Account};\\n\\n        # make it upper case, if stage name is either Res, Dev, Int, or Prod\\n        if [[ \\\\$stageName == \\\"Res\\\" || \\\\$stageName == \\\"Dev\\\" || \\\\$stageName == \\\"Int\\\" || \\\\$stageName == \\\"Prod\\\" ]]; then\\n            stageName=\\\\$(echo \\\\$stageName | tr '[:lower:]' '[:upper:]');\\n        fi\\n\\n        export \\\"ACCOUNT_\\\\${stageName}\\\"=\\\"\\\\$parameter_value\\\";\\n\\n        echo \\\"ACCOUNT_\\\\${stageName} set to \\\\$parameter_value\\\";\\n    fi\\ndone <<< \\\\$parameters\\nCDKEOF\\n ); echo -n \\\"$bash_command\\\" > ./.cdk.wrapper.warming.sh.sh; chmod +x ./.cdk.wrapper.warming.sh.sh; . ./.cdk.wrapper.warming.sh.sh; exit_code=$?; rm -rf ./.cdk.wrapper.warming.sh.sh; [ $exit_code -eq 0 ];\",\n        \"bash_command=$(cat << CDKEOF\\n #!/bin/bash\\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0\\n# Get the NPM BASIC AUTH Token and output it to ~/.npmrc\\nset -e\\n\\nif [[ -z \\\"\\\\${NPM_BASIC_AUTH_SECRET_ID}\\\" || -z \\\"\\\\${NPM_REGISTRY}\\\" ]]; then\\n    echo \\\"--- No NPM Basic Auth detected ---\\\";\\nelse\\n    NODE_AUTH_TOKEN=\\\\`aws secretsmanager get-secret-value --region \\\\${AWS_REGION} --secret-id \\\\${NPM_BASIC_AUTH_SECRET_ID} --output text --query SecretString\\\\`;\\n\\n    SCOPE=\\\"\\\";\\n    if [[ ! -z \\\"\\\\${NPM_SCOPE}\\\" ]]; then\\n        if [[ \\\"\\\\${NPM_SCOPE}\\\" != \\\"@\\\"* ]]; then\\n            SCOPE=\\\"@\\\\${NPM_SCOPE}:\\\";\\n        else\\n            SCOPE=\\\"\\\\${NPM_SCOPE}:\\\";\\n        fi\\n    fi\\n    echo \\\"\\\\${SCOPE#*://}registry=\\\\${NPM_REGISTRY}\\\" > ./.npmrc;\\n    echo \\\"//\\\\${NPM_REGISTRY#*://}:_authToken=\\\\${NODE_AUTH_TOKEN}\\\" >> ./.npmrc;\\nfi\\nCDKEOF\\n ); echo -n \\\"$bash_command\\\" > ./.cdk.wrapper.npm-login.sh.sh; chmod +x ./.cdk.wrapper.npm-login.sh.sh; ./.cdk.wrapper.npm-login.sh.sh; exit_code=$?; rm -rf ./.cdk.wrapper.npm-login.sh.sh; [ $exit_code -eq 0 ];\",\n        \"npm install -g cdk-assets@2\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"cdk-assets --path \\\"assembly-DEV/DEVCICDWrapperComplianceLogBucketStack460E97FE.assets.json\\\" --verbose publish \\\"e06cb68a43bde3d15e34d50b15f5aed7b6b2f450860a9e8fb9a9d8c6977e871e:234567890123-eu-west-1\\\"\",\n        \"cdk-assets --path \\\"assembly-INT/INTCICDWrapperComplianceLogBucketStack4111E32C.assets.json\\\" --verbose publish \\\"e06cb68a43bde3d15e34d50b15f5aed7b6b2f450860a9e8fb9a9d8c6977e871e:345678901234-eu-west-1\\\"\"\n      ]\n    }\n  }\n}"