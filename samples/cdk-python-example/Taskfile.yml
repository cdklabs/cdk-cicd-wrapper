version: '3'

dotenv: ['.env.local']

vars:
  # GIT_REPOSITORY:
  #   sh: jq -r '.config.repositoryName' package.json
  CDK_QUALIFIER: hnb659fds
  # APPLICATION:
  #   sh: jq -r '.config.applicationName' package.json

tasks:

  info:
    desc: Prints information about the pipeline
    summary: Prints information about the pipeline
    silent: true
    cmds:
      - echo "Information:"
      - 'echo "Application: {{.APPLICATION}}"'
      - 'echo "AWS Region: ${AWS_REGION}"'
      - 'echo "AWS RES Account: ${ACCOUNT_RES}"'
      - 'echo "AWS Profile: $RES_ACCOUNT_AWS_PROFILE"'
      - 'echo "Workbench stage": $WORKBENCH_STAGE'
      - 'echo "Workbench profile": $WORKBENCH_AWS_PROFILE'
      - 'echo "CDK Qualifier: {{.CDK_QUALIFIER}}"'
      - 'echo "GIT_REPOSITORY: {{.GIT_REPOSITORY}}"'
      - echo "Accounts:"
      - for: { var: STAGES_ENABLED, split: "," }
        cmd: 'echo "  - {{.ITEM}}: ${ACCOUNT_{{.ITEM}}} -- profile: ${{.ITEM}}_ACCOUNT_AWS_PROFILE"'
      - echo "===================================================="
      - cdk ls

  install:
    desc: Install dependencies
    summary: Install dependencies
    sources:
      - package-lock.json
    cmds:
      - pip install -r requirements.txt

  deploy:
    desc: Deploy the pipeline
    interactive: true
    cmds:
      - cdk deploy --all

  synth:
    desc: Synthesize the pipeline
    interactive: true
    cmds:
      - cdk synth --all

  diff:
    desc: Diff the pipeline
    interactive: true
    cmds:
      - cdk diff {{.CLI_ARGS}}
  
  destroy:
    desc: Destroy the application for all stages
    interactive: true
    cmds:
      - cdk --version
      - for: { var: STAGES_ENABLED, split: "," } 
        task: destroy:stage
        vars:
          STAGE: '{{.ITEM}}'
      - cdk destroy --all --profile {{.RES_ACCOUNT_AWS_PROFILE}}

  destroy:stage:
    desc: Destroy the application for the stage {{.STAGE}}
    cmds:
      - cdk ls
      - cdk destroy --profile ${{.STAGE}}_ACCOUNT_AWS_PROFILE {{.STAGE}}/*

  watch:
    desc: Watch for changes and rebuild
    summary: Watch for changes and rebuild
    interactive: true
    cmds:
      - cdk watch -- --region ${AWS_REGION} --profile $EXP_ACCOUNT_AWS_PROFILE --qualifier ${CDK_QUALIFIER} {{.STACKS}}

  clean:
    cmds:
      - echo "Cleaning..."

  # fix:
  #   desc: Automated process to fix various issues in code style and project setup
  #   summary: |
  #     Scanning the project to ensure the repository is in a good state. Applying automatic fixing on code-style issues.
  #   cmds:
  #     - npm run lint:fix
  #     - task: prepare

  # audit:
  #   cmds:
  #     - npm run audit

  bootstrap:
    desc: Bootstrap the development for {{.APPLICATION}}
    summary: |
      This task will bootstrap the AWS accounts to be able to deploy CDK applications.

      Get more information about CDK bootstrapping: https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html
    silent: true
    cmds:
      - echo "==============================================================="
      - echo "# Bootstrapping CDK for the pipeline {{.GIT_REPOSITORY}}        "
      - echo "==============================================================="
      - task: info
      - task: bootstrap:internal
      - echo "================================================================"

  # workbench:
  #   desc: Allows to execute commands in a workbench
  #   interactive: true
  #   cmds:
  #     - npm run build
  #     - npm run workbench -- --profile {{.WORKBENCH_AWS_PROFILE}} {{.CLI_ARGS}}

  # workbench:deploy:
  #   desc: Deploy the development in a workbench
  #   interactive: true
  #   cmds:
  #     - npm run build
  #     - npm run workbench -- deploy --profile {{.WORKBENCH_AWS_PROFILE}} {{with .CLI_ARGS}} {{.}} {{else}} --all {{end}}

  # workbench:synth:
  #   desc: Synth the development in a workbench
  #   interactive: true
  #   cmds:
  #     - npm run workbench -- synth --profile {{.WORKBENCH_AWS_PROFILE}} {{with .CLI_ARGS}} {{.}} {{end}}

  # workbench:diff:
  #   desc: Diff the development in a workbench
  #   interactive: true
  #   cmds:
  #     - npm run workbench -- diff --profile {{.WORKBENCH_AWS_PROFILE}} {{with .CLI_ARGS}} {{.}} {{else}} --all {{end}}

  # workbench:destroy:
  #   desc: Destroys the development in a workbench
  #   interactive: true
  #   cmds:
  #     - npm run workbench -- destroy --profile {{.WORKBENCH_AWS_PROFILE}} {{with .CLI_ARGS}} {{.}} {{else}} --all {{end}}

  bootstrap:internal:
    internal: true
    desc: Internal task to bootstrap the AWS accounts to be able to deploy CDK applications
    # preconditions:
    #   - sh: '[ `jq -r ''.context."@aws-cdk/core:bootstrapQualifier"'' cdk.json` = "{{.CDK_QUALIFIER}}" ]'
    #     msg: 'The bootstrap qualifier does not match the CDK_QUALIFIER variable. Please update the cdk.json file.'
    cmds:
      - task: bootstrap:RES
      - for: { var: STAGES_ENABLED, split: "," } 
        task: bootstrap:account
        vars:
          STAGE: '{{.ITEM}}'
          OPTS: --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess --trust ${ACCOUNT_RES}


  bootstrap:RES:
    internal: true
    cmds:
      - task: bootstrap:account
        vars:
          STAGE: RES

  bootstrap:account:
    internal: true
    requires:
      vars:
        - CDK_QUALIFIER
        - AWS_REGION
        - STAGE
    preconditions:
      - sh: '[[ ! -z "${{.STAGE}}_ACCOUNT_AWS_PROFILE" ]]'
        msg: 'The environment {{.STAGE}} does not have an AWS profile defined. Please define it in the .env file.'
    cmds:
      - cdk bootstrap --profile ${{.STAGE}}_ACCOUNT_AWS_PROFILE --qualifier {{.CDK_QUALIFIER}} {{.OPTS}} aws://$ACCOUNT_{{.STAGE}}/${AWS_REGION}

  # prepare:
  #   desc: Prepare the application
  #   summary: |
  #     The projects keeps up to date licensing information about 3rd party libraries. 
      
  #     To maintain this information, we run the npm run validate:fix and npm run audit:fix:license commands.
  #   sources:
  #     - 'package.json'
  #     - 'package-lock.json'
  #     - '**/*/package.json'
  #     - '**/*/package-lock.json'
  #     - '**/*/Pipfile'
  #   generates:
  #     - package-verification.json
  #   cmds:
  #     - task: install
  #     - npm run validate -- --fix
  #     - npm run lint -- --fix
  #     - npm run license -- --fix